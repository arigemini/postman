import sys
import collections

class FromToStats:
    def __init__(self):
        pass
    
    def _init_state(self):
        self.incoming = collections.defaultdict(int)
        self.outgoing = collections.defaultdict(int)

    def process(self, email_from_to_csv):
        self._init_state()
       
        with open(email_from_to_csv, 'r') as f:
            for line in f:
                _, from_, to = line.strip().split(",")
                self.outgoing[from_] += 1
                self.incoming[to] += 1
    
    def dump_summary(self, output_file):
        with open(output_file, 'w') as f:
            for email, incoming_count in sorted(self.incoming.iteritems(), key=lambda x: x[1], reverse=True):
                f.write("{0},{1},{2}\n".format(email, incoming_count, self.outgoing[email])) 

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Parse (email,from,to) file generated by generate_email_from_to_list.py")
    parser.add_argument("--email_from_to_file", type=str, required=True, help="input (email,from,to) file")
    parser.add_argument("--output_file", type=str, required=True, help="file with (email,incoming,outgoing) stats")

    args = parser.parse_args()
    
    from_to_stats = FromToStats()
    from_to_stats.process(args.email_from_to_file)
    
    print >> sys.stderr, "Dumping data to file", args.output_file
    from_to_stats.dump_summary(args.output_file)
